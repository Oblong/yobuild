# Mac only for now

set -e
set -x
. yb_settings


is_ubuntu() {
    test -f /etc/issue
}

# FIXME: this duplicates code from yb_default; should we have a yb_set_cflags command?

set_cflags_mac() {
    unset OBJCFLAGS || true
    unset CXXCPP || true
    export CFLAGS="-O3 -g"
    export CXXFLAGS="-O3 -g"
    export LDFLAGS="-L$PREFIX/lib"

    # gcc might really be clang, but that is ok, we trust the developer.
    export CC="gcc"
    export CXX="g++"
    export OBJC="gcc"

    case "$1" in
    "32") export CC="$CC -m32"
        export CXX="$CXX -m32"
        export OBJC="$OBJC -m32"
        export CFLAGS="$CFLAGS -m32"
        export CXXFLAGS="$CXXFLAGS -m32"
        export OBJCFLAGS="-m32"
        export LDFLAGS="$LDFLAGS -m32"
        ;;
    "64")
        ;;
    "universal")
        export CFLAGS="$CFLAGS -arch i386 -arch x86_64"
        export CXXFLAGS="$CXXFLAGS -arch i386 -arch x86_64"
        export OBJCFLAGS="-arch i386 -arch x86_64"
        export LDFLAGS="$LDFLAGS -arch i386 -arch x86_64"
        #export CC="$CC $CFLAGS"
        #export CXX="$CXX $CXXFLAGS"
        export CPP=/usr/bin/cpp
        export CXXCPP=/usr/bin/cpp
        ;;
    esac

    # Note: cmake ignores CPPFLAGS, so also add -I to CFLAGS and CXXFLAGS.
    # Note: have to use -isystem instead of -I to avoid Qt build failure
    # due to accidentally including libevent's event.h
    # via #include "Event.h" on case-insensitive filesystems;
    # see https://sourceforge.net/p/levent/bugs/311/
    # Note: Apple cpp doesn't support -isystem, so don't set it ever.
    #export CPPFLAGS="-isystem $PREFIX/include"
    CFLAGS="$CFLAGS -isystem $PREFIX/include $YB_EXTRA_CFLAGS"
    CXXFLAGS="$CXXFLAGS -isystem $PREFIX/include $YB_EXTRA_CXXFLAGS"
}

set_cflags() {
    if is_ubuntu
    then
        export CFLAGS="-O3 -g -isystem $PREFIX/include $YB_EXTRA_CFLAGS"
        export CXXFLAGS="-O3 -g -isystem $PREFIX/include $YB_EXTRA_CXXFLAGS"
        export LDFLAGS="-L$PREFIX/lib -Wl,-rpath,$PREFIX/lib"
    else
        set_cflags_mac $1
    fi
}


rm -rf $YB_BUILDDIR
mkdir -p $YB_BUILDDIR

# FIXME: Work around http://bugs.icu-project.org/trac/ticket/10308
# here so we don't need to do so in apps that use icu-config or
# its pkgconf file.  To do this, either move to a new icu or remove
# the bogus CFLAGS etc. from icu-config and the .pc file.
yb_download http://download.icu-project.org/files/icu4c/4.8.1.1/icu4c-4_8_1_1-src.tgz 0a70491c5fdfc5a0fa7429f820da73951e07d59a268b3d8ffe052eec65820ca1
cd $YB_BUILDDIR
DIRNAME=`ls`
cd $DIRNAME
yb_patch libicu48
cd source

YB_CONFIGURE_ARGS=""
case $YB_WIDTH in
32) YB_CONFIGURE_ARGS="--with-library-bits=32";;
esac

case $YB_WIDTH in
32|64)
    # --enable-rpath in icu build world sets the install-name
    ./runConfigureICU MacOSX --enable-static --enable-shared \
        --enable-rpath --prefix=$PREFIX $YB_CONFIGURE_ARGS
    make V=1 $PARALLEL
    make V=1 install DESTDIR=$DESTDIR
    ;;
universal)
    # 'make check' fails in 32 bit yovo unless we do a lipo build of icu.
    rm -rf $DESTDIR.32
    mkdir $DESTDIR.32
    mkdir build-32
    cd build-32
    set_cflags 32
    $YB_BUILDDIR/$DIRNAME/source/runConfigureICU MacOSX --enable-static --enable-shared \
        --enable-rpath --prefix=$PREFIX
    make $PARALLEL
    make install DESTDIR=$DESTDIR.32
    cd ..

    rm -rf $DESTDIR.64
    mkdir $DESTDIR.64
    mkdir build-64
    cd build-64
    set_cflags 64
    $YB_BUILDDIR/$DIRNAME/source/runConfigureICU MacOSX --enable-static --enable-shared \
        --enable-rpath --prefix=$PREFIX
    make $PARALLEL
    make install DESTDIR=$DESTDIR.64
    cd ..

    cp -a $DESTDIR.64/ $DESTDIR
    for file in `cd $DESTDIR$PREFIX; find . -type f | xargs file | egrep 'Mach-O|current ar archive' | sed 's/:.*//;s/ (for.*//' | sort -u`
    do
        lipo -create $DESTDIR.32$PREFIX/$file $DESTDIR.64$PREFIX/$file -output $DESTDIR$PREFIX/$file
    done
    ;;
esac

unset YB_CONFIGURE_ARGS

yb_package libicu48-4.8.1.1_$YB_WIDTH
