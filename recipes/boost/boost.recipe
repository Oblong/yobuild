# Mac only
set -e
set -x
. yb_settings

THIS_RECIPE_DIR=`dirname $0`
THIS_RECIPE_DIR=`cd $THIS_RECIPE_DIR; pwd`

boost_sanity_check() {
    if test -d "$destdir$PREFIX/opt"
    then
        echo "$destdir$PREFIX/opt exists"
        exit 1
    fi
}

is_linux() {
    test -f /etc/issue
}

# use variables here so we're less likely to forget changing the yb_package line
BOOST_MAJOR=1
BOOST_MINOR=56
BOOST_MICRO=0
BOOST_SHA256=134732acaf3a6e7eba85988118d943f0fa6b7f0850f65131fff89823ad30ff1d

build_boost_linux() {
  bitness="$1"
  destdir="$2"
  extra_archflags="$3"

  rm -rf "$destdir"

  yb_download http://sourceforge.net/projects/boost/files/boost/${BOOST_MAJOR}.${BOOST_MINOR}.${BOOST_MICRO}/boost_${BOOST_MAJOR}_${BOOST_MINOR}_${BOOST_MICRO}.tar.bz2 $BOOST_SHA256
  cd $YB_BUILDDIR; DIRNAME=`ls`; cd $DIRNAME
  yb_patch boost

  ./bootstrap.sh \
    architecture=x86 \
    address-model="$bitness" \
    threading=multi \
    --prefix="$destdir" \
    --with-libraries=filesystem,regex,system,thread,python || {
      echo "Failed to configure boost for ${bitness}/${destdir}" 1>&2
      exit 1
    }

   opt_cxxflags=
   opt_linkflags=
   case "$extra_archflags" in
   "") ;;
   *)
       opt_cxxflags="cxxflags='$extra_archflags'"
       opt_linkflags="linkflags='$extra_archflags'"
       ;;
   esac

  ./b2 install \
    --layout=tagged \
    architecture=x86 \
    address-model="$bitness" \
    dll-path="$PREFIX"/lib \
    $opt_cxxflags \
    $opt_linkflags \
    -d+2 || {
      echo "Failed to build boost for ${bitness}/${destdir}" 1>&2
      exit 3
    }

  cd "$YB_BUILDDIR"
  rm -fr "$DIRNAME"
}

build_boost_single() {
  if is_linux
  then
      build_boost_linux "$@"
      return
  fi

  bitness="$1"
  destdir="$2"
  extra_archflags="$3"

  rm -rf "$destdir"

  boost_sanity_check
  yb_download http://sourceforge.net/projects/boost/files/boost/${BOOST_MAJOR}.${BOOST_MINOR}.${BOOST_MICRO}/boost_${BOOST_MAJOR}_${BOOST_MINOR}_${BOOST_MICRO}.tar.bz2 $BOOST_SHA256
  cd $YB_BUILDDIR; DIRNAME=`ls`; cd $DIRNAME
  yb_patch boost

  # cheezy hack: for osx10.7 aka libstdc++ sdk, turn off boost features that assume <type_traits> exists
  case `sw_vers -productVersion 2>/dev/null` in
  10.[78]*)
    echo "Applying patch $THIS_RECIPE_DIR/boost1.56-stdlibc++-clang.patch to disable boost features that use <type_traits>"
    patch -p1 < $THIS_RECIPE_DIR/boost1.56-stdlibc++-clang.patch
    ;;
  10.9*|10.10*)
    ;;
  *) bs_abort "Unrecognized version of macosx";;
  esac

  if g++ --version | grep gcc
  then
      boost_toolset=darwin
  else
      boost_toolset=clang
  fi

    # Convince boost's build system to set a proper install_name, otherwise apps won't run
    # See also https://svn.boost.org/trac/boost/ticket/9141
    if test -f tools/build/v2/tools/darwin.jam
    then
        TOOLS=tools/build/v2/tools
    elif test -f tools/build/src/tools/darwin.jam
    then
        TOOLS=tools/build/src/tools
    else
        bs_abort "Can't apply mac install_name kludge"
    fi
    sed -i.bak \
        -e 's,-install_name "$(<:B)$(<:S)",-install_name "'$PREFIX'/lib/$(<:B)$(<:S)",' \
        $TOOLS/darwin.jam
    sed -i.bak \
        -e 's,-install_name "$(<\[1\]:D=)",-install_name "'$PREFIX'/lib/$(<[1]:D=)",' \
        $TOOLS/clang-darwin.jam

  ./bootstrap.sh \
    architecture=x86 \
    address-model="$bitness" \
    --with-toolset=$boost_toolset \
    threading=multi \
    --prefix="$destdir" \
    --with-libraries=filesystem,regex,system,thread,python || {
      echo "Failed to configure boost for ${bitness}/${destdir}" 1>&2
      exit 1
    }

  boost_sanity_check
   case $toolchain in
   default) toolchainlinkflags=""; toolchaincxxflags="";;
   clangcxx11) toolchainlinkflags=" -stdlib=libc++"; toolchaincxxflags="-std=c++11 -stdlib=libc++";;
   esac

  boost_sanity_check
  ./b2 install \
    --layout=tagged \
    toolset=$boost_toolset \
    architecture=x86 \
    address-model="$bitness" \
    dll-path="$PREFIX"/lib \
    cxxflags="$toolchaincxxflags ${extra_archflags}" \
    linkflags="$toolchainlinkflags ${extra_archflags}" \
    -d+2 || {
      echo "Failed to build boost for ${bitness}/${destdir}" 1>&2
      exit 3
    }
  boost_sanity_check

  cd "$YB_BUILDDIR"
  rm -fr "$DIRNAME"
}

rm -rf $YB_BUILDDIR
mkdir -p $YB_BUILDDIR
rm -rf "$DESTDIR$PREFIX"
mkdir -p "$DESTDIR$PREFIX/bin"
mkdir -p "$DESTDIR$PREFIX/lib"
mkdir -p "$DESTDIR$PREFIX/include"

case $YB_WIDTH in
32) build_boost_single 32 "${DESTDIR}$PREFIX" "-m32" ;;
64) build_boost_single 64 "${DESTDIR}$PREFIX" "" ;;
universal)
  build_boost_single 64 "${DESTDIR}.64" ""
  build_boost_single 32 "${DESTDIR}.32" "-m32"
  rsync -a "${DESTDIR}".64/* "${DESTDIR}${PREFIX}"
  for full in "$DESTDIR".64/lib/* ; do
    f=`basename "$full"`
    lipo -create "$DESTDIR".32/lib/"$f" \
                 "$DESTDIR".64/lib/"$f" \
                 -output "${DESTDIR}${PREFIX}"/lib/"$f"
  done
  rm -fr "${DESTDIR}.32" "${DESTDIR}.64"
;;
*) echo "unsupported width $YB_WIDTH"; exit 1;;
esac

if is_linux
then
    SOSUFFIX=so
else
    SOSUFFIX=dylib
fi

# As on Ubuntu Linux, make libboost_foo a synonym for libboost_foo-mt.
(
cd "${DESTDIR}${PREFIX}"/lib
for lib in libboost*-mt.a libboost*-mt.${SOSUFFIX}*
do
    lib_without_mt=`echo $lib | sed 's/-mt//'`
    lib_file=`basename $lib`
    ln -s $lib_file $lib_without_mt
done
)

yb_package boost-$BOOST_MAJOR_${BOOST_MINOR}_${BOOST_MICRO}_$YB_WIDTH
